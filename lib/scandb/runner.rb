#
#--
# ScanDB - A library for importing and analyzing information generated by
# various network scanning utilities.
#
# Copyright (c) 2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#++
#

require 'scandb/database'
require 'scandb/nmap'

require 'ostruct'
require 'optparse'

module ScanDB
  module Runner
    #
    # The command-line runner.
    #
    def Runner.command_line(args)
      options = OpenStruct.new

      opts = OptionParser.new do |opts|
        opts.banner = 'usage: scandb [-v] [-d URI] [--import-nmap FILE | -L | -p PORT | -s NAME]'

        opts.on('-d','--database URI','The URI for the Database.','Defaults to ~/.scandb/scandb.db') do |uri|
          options.database = uri
        end

        opts.on('--import-nmap FILE','Import a Nmap XML scan file') do |file|
          options.import = :nmap
          options.import_file = file
        end

        opts.on('-L','--list-hosts','List all hosts within ScanDB') do
          options.list_hosts = true
        end

        opts.on('-p','--with-port PORT','List hosts with the specified open PORT') do |port|
          options.with_port = port.to_i
        end

        opts.on('--with-open-ports','List hosts with open ports') do
          options.with_port_status = :open
        end

        opts.on('--with-filtered-ports','List hosts with filtered ports') do
          options.with_port_status = :filtered
        end

        opts.on('--with-closed-ports','List hosts with closed ports') do
          options.with_port_status = :closed
        end

        opts.on('-s','--with-service NAME','List hosts with the specified service') do |name|
          options.with_service = name
        end

        opts.on('--export-yaml FILE','Exports hosts as a YAML file') do |path|
          options.export = :yaml
          options.export_path = path
        end

        opts.on('--export-xml FILE','Exports hosts as a XML file') do |path|
          options.export = :xml
          options.export_path = path
        end

        opts.on('-v','--verbose','Increase verbosity of output') do
          options.verbose = true
        end

        opts.on('-V','--version','Print ScanDB version and exit') do
          puts ScanDB::Version
          exit
        end

        opts.on('-h','--help','This cruft') do
          puts opts
          exit
        end
      end

      opts.parse!(args)

      Database.setup(options.database || Database.config)

      if options.import
        case options.import
        when :nmap then
          hosts = Nmap.import_xml(options.import_file) do |host|
            if options.verbose
              puts ">>> Imported #{host.ip}"
            end
          end

          case hosts
          when 0
            puts "No hosts where imported."
          when 1
            puts "Imported #{hosts} host."
          else
            puts "Imported #{hosts} hosts."
          end
        end
      else
        if options.with_port
          hosts = Port.all(:number => options.with_port).scanned(:status => :open).host
        elsif options.with_service
          hosts = Service.all(:name.like => "%#{options.with_service}%").scanned(:status => :open).host
        else
          hosts = Host.all
        end

        if options.export
          File.open(options.export_path,'w') do |output|
            case options.export
            when :yaml
              output.write(hosts.to_yaml)
            when :xml
              output.write(hosts.to_xml)
            end
          end
        else
          hosts.each do |host|
            if options.verbose
              print "[ #{host} ]\n\n"

              unless host.names.empty?
                puts '  Host names:'

                host.names.each do |name|
                  puts "    #{name}"
                end

                print "\n"
              end

              unless host.os_class_guesses.empty?
                puts '  OS Classes:'

                host.os_class_guesses.each do |guess|
                  puts "    #{guess}"
                end

                print "\n"
              end

              unless host.os_match_guesses.empty?
                puts '  OS Matches:'

                host.os_match_guesses.each do |guess|
                  puts "    #{guess}"
                end

                print "\n"
              end

              unless host.scanned_ports.empty?
                puts "  Scanned Ports:"

                host.scanned_ports.each do |scanned_port|
                  puts "  #{scanned_port}"
                end

                print "\n"
              end
            else
              puts host
            end
          end
        end
      end

      return true
    end
  end
end
