#
#--
# ScanDB - A library for importing and analyzing information generated by
# various network scanning utilities.
#
# Copyright (c) 2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#++
#

require 'scandb/database'
require 'scandb/nmap'

require 'ostruct'
require 'optparse'

module ScanDB
  module Runner
    #
    # The command-line runner.
    #
    def Runner.command_line(args)
      options = OpenStruct.new

      opts = OptionParser.new do |opts|
        opts.banner = 'usage: scandb [-d URI] [--import-nmap FILE | -L | -p PORT | -s NAME]'

        opts.on('-d','--database URI','The URI for the Database.','Defaults to ~/.scandb/scandb.db') do |uri|
          options.database = uri
        end

        opts.on('--import-nmap FILE','Import a Nmap XML scan file') do |file|
          options.import = :nmap
          options.import_file = file
        end

        opts.on('-L','--list-hosts','List all hosts within ScanDB') do
          options.list_hosts = true
        end

        opts.on('-p','--with-port PORT','List hosts with the specified open PORT') do |port|
          options.with_port = port.to_i
        end

        opts.on('-s','--with-service NAME','List hosts with the specified service') do |name|
          options.with_service = name
        end

        opts.on('-h','--help','This cruft') do
          puts opts
          exit
        end
      end

      opts.parse!(args)

      if options.import
        case options.import
        when :nmap then
          hosts = Nmap.import_xml(options.import_file)

          case hosts.length
          when 0
            puts "No hosts where imported."
          when 1
            puts "Successfully imported #{hosts.length} host."
          else
            puts "Successfully imported #{hosts.length} hosts."
          end
        end
      else
        if options.with_port
          hosts = Port.all(:number => options.with_port).scanned(:status => :open).host
        elsif options.with_service
          hosts = Service.all(:name.like => "%#{options.with_service}%").scanned(:status => :open).host
        else
          hosts = Host.all
        end

        hosts.each { |host| puts host}
      end

      return true
    end
  end
end
