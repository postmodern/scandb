#
#--
# ScanDB - A library for importing and analyzing information generated by
# various network scanning utilities.
#
# Copyright (c) 2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#++
#

require 'scandb/database'
require 'scandb/host'

require 'libxml'

module ScanDB
  module Nmap
    include LibXML

    #
    # Imports scan information from a Nmap XML scan file, specified by
    # the _path_. Returns an Array of Host objects.
    #
    #   Nmap.from_xml('path/to/scan.xml')
    #   # => [...]
    #
    def Nmap.from_xml(path)
      doc = XML::Document.file(path)
      hosts = []

      doc.find("/nmaprun/host[status[@state='up']]").each do |host|
        ip = host.find_first("address[@addr and @addrtype='ipv4']")['addr']
        new_host = Host.first_or_create(:ip => ip)

        host.find('hostname').each do |hostname|
          new_host.names << HostName.first_or_create(
            :name => hostname['name'],
            :host_id => new_host.id
          )
        end

        host.find('os/osclass').each do |osclass|
          new_os = OS.first_or_create(
            :type => osclass['type'],
            :vendor => osclass['vendor'],
            :family => osclass['osfamily'],
            :version => osclass['osgen']
          )

          new_host.os_guesses << OSGuess.first_or_create(
            :os_id => new_os.id,
            :accuracy => osclass['accuracy'].to_i
          )
        end

        host.find('ports/port').each do |port|
          new_port = Port.first_or_create(
            :number => port['portid'].to_i,
            :protocol => port['protocol'].to_sym
          )

          new_service = Service.first_or_create(
            :name => port.find_first('service[@name]')['name']
          )

          new_host.scanned_ports << ScannedPort.first_or_create(
            :status => port.find_first('state[@state]')['state'].to_sym,
            :service_id => new_service.id,
            :port_id => new_port.id,
            :host_id => new_host.id
          )
        end

        new_host.save

        hosts << new_host
      end

      return hosts
    end
  end
end
